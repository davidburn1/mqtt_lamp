<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>React Local</title>
  <script type="application/javascript" src="https://unpkg.com/react@16.0.0/umd/react.production.min.js"></script>
  <script type="application/javascript" src="https://unpkg.com/react-dom@16.0.0/umd/react-dom.production.min.js"></script>

  <script type="application/javascript" src="https://unpkg.com/babel-standalone@6.26.0/babel.js"></script>
</head>

<body>
	<div id="header"></div>
	<div id="root"></div>



<script type="text/babel">


	class Main extends React.Component {
		ws = null;


		connect = function(){
			this.ws = new WebSocket('ws://192.168.1.191:81/ws');
		}

		componentDidMount() {
			this.connect();

			this.ws.onopen = () => {
				console.log('ws connected')
			}

			this.ws.onmessage = evt => {
				const message = JSON.parse(evt.data)
				this.setState({dataFromServer: message})
				console.log(message)
			}

			this.ws.onclose = () => {
				console.log('disconnected')
				// automatically try to reconnect on connection loss
			}

			this.ws.onclose = e => {
				console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000,5 / 1000)} second.`, e.reason);
				//that.timeout = that.timeout + that.timeout; //increment retry interval
				//connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout
			};

			this.ws.onerror = err => {
				console.error(	"Socket encountered error: ", err.message, "Closing socket");
				this.ws.close();
			};
		}

		render(){
			return (
				<h2>rendered</h2>
			);
			// <ChildComponent websocket={this.ws} />
		}
	}



    class ShoppingList extends React.Component { 
		// Use the render function to return JSX component      
		render() { 
			return (
			<div className="shopping-list">
			<h1>Shopping List for {this.props.name}</h1>
			<ul>
				<li>Instagram</li>
				<li>WhatsApp</li>
				<li>Oculus</li>
			</ul>
			</div>
		);
		} 
	}
	



	class MyLamp extends React.Component {
		constructor(props) {
			super(props);
			this.state = {
				state: 1,
			};
		}



		toggleState() {
			console.log(this);
			console.log(this.state);
			let newState = this.state.state === 1 ? 0 : 1;
			console.log(newState);
			this.setState({
				state: newState
			});
		}
 


		// handleClick() {
		// 	this.props.clickHandler();
		// 	console.log('clicked');
		// }
		render() {
			return (
				<div>
				<p>Lamp sate: {this.state.state}</p>
				<button onClick={this.toggleState}>{this.state.state} the color</button>
				</div>
			);
		}
	} 




		
	// Create a function to wrap up your component
	function App(){
		return(
			<div>
				<h1> header </h1>
				<ShoppingList name="myname"/>
				<Main />
				<MyLamp />
				after lamp
			</div>
		)
	}





// Apply react rendering to root div
ReactDOM.render( <App />, document.getElementById('root') )


// service worker for offline caching
if (!navigator.serviceWorker.controller) {
     navigator.serviceWorker.register("/sw.js").then(function(reg) {
         console.log("Service worker has been registered for scope: " + reg.scope);
     });
 }
</script>

</body>

</html>